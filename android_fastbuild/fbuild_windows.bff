; Automatic Android Paths
;-------------------------
// .NDKRoot = 'E:\DevTools\android-ndk-r17b'
.NDKRoot = '/home/haiphan/Android/android-ndk-r20'
.NATIVE_API_LEVEL    = '16'
.NATIVE_API_LEVEL_ARM64 = '21'
.NDKToolchainVersion = '4.9'
.NDKToolchains       = '$NDKRoot$\toolchains'
.NDKToolchainArmType = 'arm-linux-androideabi'
.NDKToolchainArm64Type = 'aarch64-linux-android'
.NDKToolchainX86Type = 'i686-linux-android'
.NDKToolchainArmGccRoot = '$NDKToolchains$\arm-linux-androideabi-4.9\prebuilt\windows-x86_64'
.NDKToolchainArmRoot = '$NDKToolchainArmGccRoot$\bin'
.NDKGCCArmLibs = '$NDKToolchainArmGccRoot$\lib\gcc\arm-linux-androideabi\4.9.x\'
.NDKToolchainArm64GccRoot = '$NDKToolchains$\aarch64-linux-android-4.9\prebuilt\windows-x86_64'
.NDKToolchainArm64Root = '$NDKToolchainArm64GccRoot$\bin'
.NDKToolchainX86GccRoot = '$NDKToolchains$\x86-4.9\prebuilt\windows-x86_64'
.NDKToolchainX86Root = '$NDKToolchainX86GccRoot$\bin'
.NDKToolchainClangRoot = '$NDKToolchains$\llvm\prebuilt\windows-x86_64\bin'
.NDKToolchainClangNdkRoot = '$NDKToolchains$\llvm\prebuilt\windows-x86_64\bin'
.NDKPlatform         = 'android-$NATIVE_API_LEVEL$'

;Android Compilers
;---------------------
Compiler( 'clang' )
{
    .Executable     = '$NDKToolchainClangRoot$\clang++.exe'
    .ExtraFiles     = '$NDKToolchainClangRoot$\libwinpthread-1.dll'
}

Compiler( 'clangC' )
{
    .Executable     = '$NDKToolchainClangRoot$\clang.exe'
    .ExtraFiles     = '$NDKToolchainClangRoot$\libwinpthread-1.dll'
}

;Android configurations
;----------------------
.AndroidBaseConfig = [
    .Platform           = 'Android'
    .Compiler           = 'clang'
    ;.Compiler          = 'clangC'
    .CPlusPlusStdFlag   = ' -std=c++11'
    ;.CPlusPlusStdFlag   = ' -std=gnu99'
    .DEFINES            = '-D__ANDROID__ -DOS_ANDROID -DANDROID -D_ANDROID_ -D_ANDROID -DANDROID_NDK'
    .CFLAGS             = ' -fvisibility=hidden -fpic' ;VERY IMPORTANT for security reasons, do not remove in case of a problem with these flags, there should be a different solution
                        + ' -Wno-psabi -Wno-write-strings -fsigned-char -w -g $CPlusPlusStdFlag$ -fstack-protector -fomit-frame-pointer -fno-strict-aliasing'
                        + ' -finline-limit=300 -pipe -ftree-vectorize -fno-rtti -fno-exceptions -ffunction-sections -fdata-sections'
                        + ' -funwind-tables -fasynchronous-unwind-tables'
                        + ' -finline-functions -funswitch-loops -funroll-loops'

    .IncludePaths       = ' -I$NDKRoot$\sources\cxx-stl\llvm-libc++\include'
                        + ' -I$NDKRoot$\sources\android\support\include'
                        + ' -I$NDKRoot$\sysroot\usr\include'
    .Linker             = '$NDKToolchainClangRoot$\clang++.exe'
    .LibrarianOptions   = '-r -s %2 %1'
    .LinkerOptions      = ' -shared -o %2 %1'
                        + ' -march=armv7-a'
                        + ' -z relro -z now'
                        + ' -z noexecstack'
                        + ' -gcc-toolchain $NDKToolchainArmGccRoot$'
                        + ' -target armv7-none-linux-androideabi'
                        + ' -v'
    .LinkerSystemLibs   = '-lGLESv2 -llog -lEGL -lc'
]

.AndroidArmBaseConfig = [
    Using( .AndroidBaseConfig )
    .DEFINES            + ' -D__ANDROID_API__=$NATIVE_API_LEVEL$'
    .CFLAGS             + ' -target armv7-none-linux-androideabi -marm -march=armv7-a -mfpu=neon-vfpv4 -mfloat-abi=softfp'
    .Librarian          = '$NDKToolchainArmRoot$\$NDKToolchainArmType$-ar.exe'
    .StripExecutable    = '$NDKToolchainArmRoot$\$NDKToolchainArmType$-strip.exe'
    .ObjectCopyExecutable = '$NDKToolchainArmRoot$\$NDKToolchainArmType$-objcopy.exe'
    .LinkerSystemPaths  = ' --sysroot=$NDKRoot$\platforms\$NDKPlatform$\arch-arm'
                        + ' -L$NDKRoot$\sources\cxx-stl\llvm-libc++\libs\armeabi-v7a'
                        + ' -L$NDKRoot$\platforms\$NDKPlatform$\arch-arm\usr\lib'
                        + ' -I$NDKToolchainArmGccRoot$\lib\gcc\arm-linux-androideabi\4.9.x'
    .LinkerOptions      + ' -target armv7-none-linux-androideabi'
                        + ' -march=armv7-a'
                        + ' -Wall'
                        + ' -g'
                        + ' -Wl,--fix-cortex-a8'
                        + ' -gcc-toolchain $NDKToolchainArmGccRoot$'
    .IncludePaths       + ' -I$NDKRoot$\sysroot\usr\include\arm-linux-androideabi'
]

.AndroidArm64BaseConfig = [
    Using( .AndroidBaseConfig )
    .DEFINES            + ' -D__ANDROID_API__=$NATIVE_API_LEVEL_ARM64$'
    .CFLAGS             + ' -target arm64-none-linux-androideabi'
                        + ' -march=armv8-a'
                        + ' -mfloat-abi=softfp'
    .Librarian          = '$NDKToolchainArm64Root$\$NDKToolchainArm64Type$-ar.exe'
    .StripExecutable    = '$NDKToolchainArm64Root$\$NDKToolchainArm64Type$-strip.exe'
    .ObjectCopyExecutable = '$NDKToolchainArm64Root$\$NDKToolchainArm64Type$-objcopy.exe'
    .LinkerSystemPaths  = ' --sysroot=$NDKRoot$\platforms\android-$NATIVE_API_LEVEL_ARM64$\arch-arm64'
                        + ' -L$NDKRoot$\sources\cxx-stl\llvm-libc++\libs\arm64-v8a'
                        + ' -L$NDKRoot$\platforms\android-$NATIVE_API_LEVEL_ARM64$\arch-arm64\usr\lib'
                        + ' -I$NDKToolchainArm64GccRoot$\lib\gcc\aarch64-linux-android\4.9.x'
    .LinkerOptions      + ' -target arm64-none-linux-androideabi'
                        + ' -march=armv8-a'
                        + ' -gcc-toolchain $NDKToolchainArm64GccRoot$'
    .IncludePaths       + ' -I$NDKRoot$\sysroot\usr\include\aarch64-linux-android'
]

.AndroidReleaseBaseConfig = [
    Using( .AndroidBaseConfig )
    .additionalDefines   = ' -DNDEBUG'
    .additionalFlags     = ' -O3'
]

.AndroidDebugBaseConfig = [
    Using( .AndroidBaseConfig )
    .additionalDefines   = ' -UNDEBUG'
    .additionalFlags     = ' -O0'
]

{
    .Project =
    [
        .Name = 'GLES2'
        .Location = '.'
        .SolutionDefines = ''

    ]

    Using(.Project)

    ObjectList('GLES2_obj_C++-Release-ARM')
    {
        Using(.AndroidReleaseBaseConfig)
        Using(.AndroidArmBaseConfig)

        .CompilerInputFiles = {
            '$Location$/gl_code.cpp',
        }
        .CompilerOutputPath = '$Location$/obj/ARM/Release/'
        .IncludeDirs = '$Location$'
        .CompilerOptions = '$DEFINES$ $CFLAGS$ $IncludePaths$ -c %1 -o %2 -v'
    }

    DLL('GLES2-Release-ARM')
    {
        Using(.AndroidReleaseBaseConfig)
        Using(.AndroidArmBaseConfig)

        .Libraries = {
            "GLES2_obj_C++-Release-ARM",
        }
;       .LinkerLinkOpjects = false
        .LinkerOptions + ' $LinkerSystemLibs$ $LinkerSystemPaths$'
        .LinkerType = "auto"
        .LinkerOutput = '$Location$/release/libs/armeabi-v7a/libGLES2.so'
    }

    ObjectList('GLES2_obj_C++-Debug-ARM')
    {
        Using(.AndroidDebugBaseConfig)
        Using(.AndroidArmBaseConfig)

        .CompilerInputFiles = {
            '$Location$/gl_code.cpp',
        }
        .CompilerOutputPath = '$Location$/obj/ARM/Debug/'
        .IncludeDirs = '$Location$'
        .CompilerOptions = '$DEFINES$ $CFLAGS$ $IncludePaths$ -c %1 -o %2 -v'
    }

    DLL('GLES2-Debug-ARM')
    {
        Using(.AndroidDebugBaseConfig)
        Using(.AndroidArmBaseConfig)

        .EntryPointLibsList = 'GLES2_obj_C-Debug-ARM'
        .Libraries = {
            'GLES2_obj_C++-Debug-ARM'
        }
        .LinkerLinkOpjects = false
        .LinkerOptions  + ' $LinkerSystemLibs$'
                        + ' $LinkerSystemPaths$'
        .LinkerType = "auto"
        .LinkerOutput = '$Location$/debug/libs/armeabi-v7a/libhello-GLES2.so'
    }
    
    ObjectList('GLES2_obj_C++-Debug-ARM64')
    {
        Using(.AndroidDebugBaseConfig)
        Using(.AndroidArm64BaseConfig)

        .CompilerInputFiles = {
            '$Location$/gl_code.cpp',
        }
        .CompilerOutputPath = '$Location$/obj/ARM64/Debug/'
        .IncludeDirs = '$Location$'
        .CompilerOptions = '$DEFINES$ $CFLAGS$ $IncludePaths$ -c %1 -o %2 -v'
    }

    DLL('GLES2-Debug-ARM64')
    {
        Using(.AndroidDebugBaseConfig)
        Using(.AndroidArm64BaseConfig)

        .EntryPointLibsList = 'GLES2_obj_C-Debug-ARM64'
        .Libraries = {
            'GLES2_obj_C++-Debug-ARM64'
        }
        .LinkerLinkOpjects = false
        .LinkerOptions  + ' $LinkerSystemLibs$'
                        + ' $LinkerSystemPaths$'
        .LinkerType = "auto"
        .LinkerOutput = '$Location$/debug/libs/arm64-v8a/libhello-GLES2.so'
    }

    ObjectList('GLES2_obj_C++-Release-ARM64')
    {
        Using(.AndroidReleaseBaseConfig)
        Using(.AndroidArm64BaseConfig)

        .CompilerInputFiles = {
            '$Location$/gl_code.cpp',
        }
        .CompilerOutputPath = '$Location$/obj/ARM64/Debug/'
        .IncludeDirs = '$Location$'
        .CompilerOptions = '$DEFINES$ $CFLAGS$ $IncludePaths$ -c %1 -o %2 -v'
    }

    DLL('GLES2-Release-ARM64')
    {
        Using(.AndroidReleaseBaseConfig)
        Using(.AndroidArm64BaseConfig)

        .EntryPointLibsList = 'GLES2_obj_C-Debug-ARM64'
        .Libraries = {
            'GLES2_obj_C++-Debug-ARM64'
        }
        .LinkerLinkOpjects = false
        .LinkerOptions  + ' $LinkerSystemLibs$'
                        + ' $LinkerSystemPaths$'
        .LinkerType = "auto"
        .LinkerOutput = '$Location$/release/libs/arm64-v8a/libhello-GLES2.so'
    }
}

Alias('all')
{
    .Targets = {
        'GLES2-Release-ARM',
        'GLES2-Debug-ARM',
        'GLES2-Release-ARM64',
        'GLES2-Debug-ARM64',
    }
}
